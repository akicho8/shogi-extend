ruby:
  select_func = -> (model, key) { select_tag(key, options_for_select(model.sort_by(&:name).inject({}) { |a, e| a.merge(skill_option_create(e)) }), class: "input", "v-model" => key, name: "", include_blank: true) }

#app
  = render :partial => "header"

  .columns
    .column
      = form_with(url: [:general, :s], method: :get, skip_enforcing_utf8: true) do |form|
        .field.has-addons
          .control.is-expanded
            = form.search_field(:query, class: "input", value: controller.current_form_search_value, placeholder: "", list: "user_key_list", autofocus: controller.current_tags.blank?, "v-model" => "query", :ref => "main_field")
            = tag.datalist(id: "user_key_list") do
              - Warabi::TacticInfo.all_elements.each do |e|
                = tag.option(value: e.name)
          .control
            = form.button(icon_tag(:fas, :search), name: nil, class: "button is-info", data: {disable_with: icon_tag(:fas, :sync, :spin)})
        .field
          - if controller.current_tactics.present?
            - controller.current_tactics.each do |e|
              =<> link_to(e, [:tactic_article, id: e], :class => "button is-text")
          - if controller.current_tags.present? && current_records.exists?
            =<> link_to("#{controller.current_form_search_value} ZIP ダウンロード", params.to_unsafe_h.merge(format: "zip"), class: "button is-info")
          = link_to("詳細検索", "#", "@click.stop" => "open = !open", ":class" => "['button', 'is-text', {'is-active': open}]")

        template v-if="open"
          .has-text-left
            .field
              label.label[for="plus_tag"]= "タグ"
              input#plus_tag.input type="text" v-model="plus_tag" ref="plus_tag"
            .field
              label.label[for="minus_tag"]= "含まないタグ"
              input#minus_tag.input type="text" v-model="minus_tag"
            .field
              label.label[for="attack_key"]= "戦型"
              = select_func[Warabi::AttackInfo, :attack_key]
            .field
              label.label[for="defense_key"]= "囲い"
              = select_func[Warabi::DefenseInfo, :defense_key]
            .field
              label.label[for="turn_max"]= "手数"
              .control
                label.radio
                  input type="radio" v-model="turn_max" value="手数<50" = " " + "50手未満"
                label.radio
                  input type="radio" v-model="turn_max" value="手数>=150" = " " + "150手以上"
                label.radio
                  input type="radio" v-model="turn_max" value="手数>=200" = " " + "200手以上"
            .field
              p.control
                = form.submit("検索", name: nil, class: "button is-primary", data: {disable_with: "検索中"})

  .columns
    .column
      = @rows.to_html

  .columns
    .column
      - if current_records
        .has-text-centered
          = paginate current_records
        - content_for :head do
          = rel_next_prev_link_tags current_records

javascript:
  new Vue({
    el: "#app",
    data: {
      open: false,
      turn_max: "",
      plus_tag: "",
      minus_tag: "",
      defense_key: "",
      attack_key: "",
    },
    created: function() {
      const dom = document.querySelector("input[type=search]")
      this.plus_tag = dom.value
      // Vue のスコープに入ると autofocus 属性が無視されるようなので自力で設定する
      this.$nextTick(() => this.$refs.main_field.focus())
    },
    watch: {
      open: function (v) {
        if (v) {
          this.$nextTick(() => this.$refs.plus_tag.focus())
        } else {
          this.$nextTick(() => this.$refs.main_field.focus())
        }
      },
    },
    computed: {
      query: {
        get: function () {
          let list = []
          if (this.plus_tag.length >= 1) {
            list.push(this.plus_tag)
          }
          if (this.minus_tag.length >= 1) {
            list.push(`-${this.minus_tag}`)
          }
          if (this.attack_key.length >= 1) {
            list.push(this.attack_key)
          }
          if (this.defense_key.length >= 1) {
            list.push(this.defense_key)
          }
          if (this.turn_max.length >= 1) {
            list.push(this.turn_max)
          }
          return list.join(" ")
        },
        set: function (v) {
          this.plus_tag = v
          this.minus_tag = ""
          this.turn_max = ""
          this.attack_key = ""
          this.defense_key = ""
        },
      },
    }
  })
