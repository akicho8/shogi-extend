= render :partial => "header"

.columns
  .column
    = form_with(url: [:resource_ns1, :w], method: :get, skip_enforcing_utf8: true) do |form|
      .field.has-addons
        .control.is-expanded
          = form.search_field(:query, class: "input", value: controller.current_form_search_value, placeholder: "", list: "user_key_list", autofocus: controller.current_query_hash.blank?)
          = tag.datalist(id: "user_key_list") do
            - Bushido::TacticInfo.all_elements.each do |e|
              = tag.option(value: e.name)
            - user_keys = []
            / 利用者
            - user_keys.concat SwarsBattleUser.where.not(last_reception_at: nil).order(last_reception_at: :desc).limit(64).pluck(:user_key)
            / 最近取り込んだ人たち
            - user_keys.concat SwarsBattleUser.order(updated_at: :desc).limit(32).pluck(:user_key)
            / すごい人たち
            - user_keys.concat SwarsBattleUser.joins(:swars_battle_grade).order("swars_battle_grades.priority desc").order(:updated_at => :desc).limit(32).pluck(:user_key)
            - user_keys.uniq.each do |e|
              = tag.option(value: e)
        .control
          = form.button(icon_tag(:fas, :search), name: nil, class: "button is-info", data: {disable_with: icon_tag(:fas, :sync, :spin)})
          = form.submit("検索") if Rails.env.test?

      .field
        - if controller.current_query_hash && current_records.exists?
          =<> link_to("#{controller.current_form_search_value} ZIP ダウンロード", params.to_unsafe_h.merge(format: "zip"), class: "button is-info")
        - if controller.current_query_hash
          - if tags = controller.current_query_hash[:tags]
            - tags.each do |e|
              = link_to(e, [:tactic_article, id: e], class: "button is-success")
.columns
  .column
    = @rows.to_html
.columns
  .column
    - if current_records
      .has-text-centered
        = paginate current_records

  - content_for :head do
    = rel_next_prev_link_tags current_records
- if Rails.env.development? && false
  = SwarsBattleUser.to_html
  = SwarsBattleRecord.to_html
