# -*- coding: utf-8; compile-command: "scp sidekiq.service s:/etc/systemd/system/; ssh s 'sudo systemctl daemon-reload; sudo systemctl restart sidekiq; sudo systemctl status sidekiq; sudo systemctl reset-failed sidekiq'" -*-

# https://o9sec.com/2019/09/14/3564/

#
# This file tells systemd how to run Sidekiq as a 24/7 long-running daemon.
#
# Customize this file based on your bundler location, app directory, etc.
# Customize and copy this into /usr/lib/systemd/system (CentOS) or /lib/systemd/system (Ubuntu).
# Then run:
#   - systemctl enable sidekiq
#   - systemctl {start,stop,restart} sidekiq
#
# This file corresponds to a single Sidekiq process.  Add multiple copies
# to run multiple processes (sidekiq-1, sidekiq-2, etc).
#
# Use `journalctl -u sidekiq -rn 100` to view the last 100 lines of log output.
#
[Unit]
Description=sidekiq staging
After=syslog.target network.target
OnFailure=failed_notify@%n.service

# See these pages for lots of options:
#
#   https://www.freedesktop.org/software/systemd/man/systemd.service.html
#   https://www.freedesktop.org/software/systemd/man/systemd.exec.html
#
# THOSE PAGES ARE CRITICAL FOR ANY LINUX DEVOPS WORK; read them multiple
# times! systemd is a critical tool for all developers to know and understand.
#
[Service]
#
#      !!!!  !!!!  !!!!
#
# As of v6.0.6, Sidekiq automatically supports systemd's `Type=notify` and watchdog service
# monitoring. If you are using an earlier version of Sidekiq, change this to `Type=simple`
# and remove the `WatchdogSec` line.
#
#      !!!!  !!!!  !!!!
#
Type=notify
# If your Sidekiq process locks up, systemd's watchdog will restart it within seconds.
WatchdogSec=10

WorkingDirectory=/var/www/shogi_web_staging/current
EnvironmentFile=/etc/sysconfig/systemd_secret_env
# If you use rbenv:
ExecStart=/bin/bash -lc 'exec /usr/local/rbenv/shims/bundle exec sidekiq -e staging'
ExecStartPost=/home/deploy/slack_notify %n start

# If you use the system's ruby:
# ExecStart=/usr/local/bin/bundle exec sidekiq -e staging
# If you use rvm in staging, don't.

# use `systemctl reload sidekiq` to send the quiet signal to Sidekiq
# at the start of your deploy process.
# Or you can use `systemctl kill -s TSTP sidekiq`
ExecReload=/usr/bin/kill -TSTP $MAINPID

# !!! Change this to your deploy user account !!!
User=deploy
Group=deploy
UMask=0002

# Greatly reduce Ruby memory fragmentation and heap usage
# https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/
# https://evilmartians.com/chronicles/fullstaq-ruby-first-impressions-and-how-to-migrate-your-docker-kubernetes-ruby-apps-today
Environment=MALLOC_ARENA_MAX=2

# if we crash, restart
RestartSec=1
Restart=always

# output goes to /var/log/syslog (Ubuntu) or /var/log/messages (CentOS)
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target
